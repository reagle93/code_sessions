#include<bits/stdc++.h>
using namespace std;

struct Node
{
	int data;
	Node *left, *right;
};

Node *newNode(int data)
{
	Node *node = new Node;
	node->data = data;
	node->left = node->right = NULL;
	return node;
}

Node *removeShortPathNodesUtil(Node *root, int sum, int k)
{
	if (root == NULL)
		return NULL;

	root->left = removeShortPathNodesUtil(root->left, sum + root->data, k);
	root->right = removeShortPathNodesUtil(root->right, sum + root->data, k);

	if (root->left == NULL && root->right == NULL && sum + root->data < k)
	{
		delete root;
		return NULL;
	}
	return root;
}

Node *removeShortPathNodes(Node *root, int k)
{
	int sum = 0;
	return removeShortPathNodesUtil(root, sum, k);
}

void printInorder(Node *root)
{
	if (root)
	{
		printInorder(root->left);
		cout << root->data << " ";
		printInorder(root->right);
	}
}

int main() {
	int k = 45;
    struct Node *root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
    root->right->left = newNode(6);
    root->right->right = newNode(7);
    root->left->left->left = newNode(8);
    root->left->left->right = newNode(9);
    root->left->right->left = newNode(12);
    root->right->right->left = newNode(10);
    root->right->right->left->right = newNode(11);
    root->left->left->right->left = newNode(13);
    root->left->left->right->right = newNode(14);
    root->left->left->right->right->left = newNode(15);
 
    cout <<"Tree before truncation\n";
    printInorder(root);
 
    root = removeShortPathNodes(root, k); // k is 45
 
    cout <<"\n\nTree after truncation\n";
    printInorder(root);
	return 0;
}
